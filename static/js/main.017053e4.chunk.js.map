{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","username","room","useState","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","author","message","time","Date","now","getHours","toString","padStart","getMinutes","getSeconds","emit","list","useEffect","on","data","className","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","io","connect","App","setUsername","setRoom","showChat","setShowChat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.017053e4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time:\n          new Date(Date.now()).getHours().toString().padStart(2, '0') +\n          \":\" +\n          new Date(Date.now()).getMinutes().toString().padStart(2, '0') + \n          \":\" +\n          new Date(Date.now()).getSeconds().toString().padStart(2, '0'),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n  }, [socket]);\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <p>Live Chat - Room: {room}</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent) => {\n            return (\n              <div\n                className=\"message\"\n                id={username === messageContent.author ? \"you\" : \"other\"}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\">{messageContent.time}</p>\n                    <p id=\"author\">{messageContent.author}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Hey...\"\n          onChange={(event) => {\n            setCurrentMessage(event.target.value);\n          }}\n          onKeyPress={(event) => {\n            event.key === \"Enter\" && sendMessage();\n          }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import \"./App.css\";\nimport io from \"socket.io-client\";\nimport { useState } from \"react\";\nimport Chat from \"./Chat\";\n\nconst socket = io.connect(\"https://lehuuhlong.github.io/chat-server\");\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>Join A Chat</h3>\n          <input\n            type=\"text\"\n            placeholder=\"John...\"\n            onChange={(event) => {\n              setUsername(event.target.value);\n            }}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            onChange={(event) => {\n              setRoom(event.target.value);\n            }}\n          />\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n      ) : (\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}